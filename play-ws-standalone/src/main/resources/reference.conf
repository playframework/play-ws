play {

  # Configuration for Play WS
  ws {

    timeout {

      # If non null, the connection timeout, this is how long to wait for a TCP connection to be made
      connection = 2 minutes

      # If non null, the idle timeout, this is how long to wait for any IO activity from the remote host
      # while making a request
      idle = 2 minutes

      # If non null, the request timeout, this is the maximum amount of time to wait for the whole request
      request = 2 minutes
    }

    # Whether redirects should be followed
    followRedirects = true

    # Whether the JDK proxy properties should be read
    useProxyProperties = true

    # If non null, will set the User-Agent header on requests to this
    useragent = null

    # Whether compression should be used on incoming and outgoing requests
    compressionEnabled = false

    # ssl configuration
    ssl {

      # Whether we should use the default JVM SSL configuration or not
      # When false additional configuration will be applied on the context (as configured below).
      default = false

      # The ssl protocol to use
      protocol = "TLSv1.2"

      # Whether revocation lists should be checked, if null, defaults to platform default setting.
      checkRevocation = null

      # A sequence of URLs for obtaining revocation lists
      revocationLists = []

      # The enabled cipher suites. If empty, uses the platform default.
      enabledCipherSuites = []

      # The enabled protocols. If empty, uses the platform default.
      enabledProtocols = ["TLSv1.2", "TLSv1.1", "TLSv1"]

      # The debug configuration
      debug = []

      # The hostname verifier class.
      # If non null, should be the fully qualify classname of a class that implements HostnameVerifier, otherwise
      # the default will be used
      hostnameVerifierClass = null

      # Configuration for the key manager
      keyManager {
        # The key manager algorithm. If empty, uses the platform default.
        algorithm = null

        # The key stores
        stores = [
        ]
        # The key stores should look like this
        prototype.stores {
          # The store type. If null, defaults to the platform default store type, ie JKS.
          type = null

          # The path to the keystore file. Either this must be non null, or data must be non null.
          path = null

          # The data for the keystore. Either this must be non null, or path must be non null.
          data = null

          # The password for loading the keystore. If null, uses no password.
          # It's recommended to load password using environment variable
          password = null
        }
      }

      trustManager {
        # The trust manager algorithm. If empty, uses the platform default.
        algorithm = null

        # The trust stores
        stores = [
        ]
        # The key stores should look like this
        prototype.stores {
          # The store type. If null, defaults to the platform default store type, ie JKS.
          type = null

          # The path to the keystore file. Either this must be non null, or data must be non null.
          path = null

          # The data for the keystore. Either this must be non null, or path must be non null.
          data = null

          # The password for loading the truststore. If null, uses no password.
          # It's recommended to load password using environment variable
          password = null
        }

      }

      # The loose ssl options.  These allow configuring ssl to be more loose about what it accepts,
      # at the cost of introducing potential security issues.
      loose {

        # If non null, overrides the platform default for whether legacy hello messages should be allowed.
        allowLegacyHelloMessages = null

        # If non null, overrides the platform default for whether unsafe renegotiation should be allowed.
        allowUnsafeRenegotiation = null

        # Whether hostname verification should be disabled
        disableHostnameVerification = false

        # Whether any certificate should be accepted or not
        acceptAnyCertificate = false

        # Whether the SNI (Server Name Indication) TLS extension should be disabled
        # This setting MAY be respected by client libraries.
        #
        # https://tools.ietf.org/html/rfc3546#sectiom-3.1
        disableSNI = false
      }

      # Debug configuration
      debug {

        # Turn on all debugging
        all = false

        # Turn on ssl debugging
        ssl = false

        # Print SSLContext tracing
        sslctx = false

        # Print key manager tracing
        keymanager = false

        # Print trust manager tracing
        trustmanager = false

      }

      sslParameters {
        # translates to a setNeedClientAuth / setWantClientAuth calls
        # "default" – leaves the (which for JDK8 means wantClientAuth and needClientAuth are set to false.)
        # "none"    – `setNeedClientAuth(false)`
        # "want"    – `setWantClientAuth(true)`
        # "need"    – `setNeedClientAuth(true)`
        clientAuth = "default"

        # protocols (names)
        protocols = []
      }
    }

  }
}
